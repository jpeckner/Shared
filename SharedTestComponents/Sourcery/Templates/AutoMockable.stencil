{% macro adjustedAccessLevel type %}{% if type.accessLevel == "public" %}open{% else %}{{ type.accessLevel }}{% endif %}{% endmacro %}

{% macro genericTypesDeclaration type %}{% if type.annotations.genericTypes %}<{{ type.annotations.genericTypes }}>{% endif %}{% endmacro %}

{% macro downcastGuardBlock method %}
        {% for param in method.parameters where param.annotations.isGenericParam %}
        {% if forloop.first %}guard {% endif %}let {{ param.name }} = {{ param.name }} as? {{ param.typeName }}Generic{% if forloop.last %} else { return }{% else %},
        {% endif %}
        {% endfor %}
{% endmacro %}

{% macro genericConstraintsDeclaration type %}{% if type.annotations.genericConstraints %} where {{ type.annotations.genericConstraints }}{% endif %}{% endmacro %}

{% macro swiftifyMethodName name %}{{ name | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | snakeToCamelCase | lowerFirstWord }}{% endmacro %}

{% macro methodThrowableErrorDeclaration method type %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call swiftifyMethodName method.selectorName %}ThrowableError: Error?
{% endmacro %}

{% macro methodThrowableErrorUsage method %}
        if let error = {% call swiftifyMethodName method.selectorName %}ThrowableError { throw error }
{% endmacro %}

{% macro methodReceivedParamName method %}{% if method.parameters.count == 1 %}{% call swiftifyMethodName method.selectorName %}Received{% for param in method.parameters %}{{ param.name|upperFirstLetter }}{% endfor %}{% elif not method.parameters.count == 0 %}{% call swiftifyMethodName method.selectorName %}ReceivedArguments{% endif %}{% endmacro %}

{% macro methodReceivedParameters method %}{% for param in method.parameters where not param.isClosure or param.typeAttributes.escaping %}{% if forloop.last %}{% call methodReceivedParamName method %} = {% endif %}{% endfor %}{% for param in method.parameters where not param.isClosure or param.typeAttributes.escaping %}{% if method.parameters.count == 1 %}{{ param.name }}{% else %}{% if forloop.first %}({% endif %}{{ param.name }}: {{ param.name }}{% if not forloop.last %}, {% endif %}{% if forloop.last %}){% endif %}{% endif %}{% endfor %}{% endmacro %}

{% macro methodClosureName method %}{% call swiftifyMethodName method.selectorName %}Closure{% endmacro %}

{% macro methodClosureDeclaration method %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call methodClosureName method %}: (({% for param in method.parameters %}{{ param.typeName }}{% if param.annotations.isGenericParam %}Generic{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %}) {% if method.throws %}throws {% endif %}-> {% if method.isInitializer or method.returnTypeName.isVoid %}Void{% else %}{{ method.returnTypeName }}{% endif %})?
{% endmacro %}

{% macro methodClosureCallParameters method %}{% for param in method.parameters %}{{ param.name }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}

{% macro mockMethod method type %}
    // MARK: - {{ method.shortName }}

    {% if method.throws %}
        {% call methodThrowableErrorDeclaration method type %}
    {% endif %}
    {% if not method.isInitializer %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call swiftifyMethodName method.selectorName %}CallsCount = 0
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call swiftifyMethodName method.selectorName %}Called: Bool {
        return {% call swiftifyMethodName method.selectorName %}CallsCount > 0
    }
    {% endif %}
    {% if method.parameters.count == 1 %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call methodReceivedParamName method %}: {% for param in method.parameters %}{% if param.isClosure %}({% endif %}{{ param.typeName.unwrappedTypeName }}{% if param.isClosure %}){% endif %}?{% endfor %}
    {% elif not method.parameters.count == 0 %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call methodReceivedParamName method %}: ({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% if param.annotations.isGenericParam %}Generic{% endif %}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})?
    {% endif %}
    {% if not method.returnTypeName.isVoid and not method.isInitializer %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} var {% call swiftifyMethodName method.selectorName %}ReturnValue: {{ method.returnTypeName }}{% if not method.isOptionalReturnType %}!{% endif %}
    {% endif %}
    {% call methodClosureDeclaration method %}

{% if method.isInitializer %}
    {% call adjustedAccessLevel type %} required {{ method.name }} {
        {% call methodReceivedParameters method %}
        {% call methodClosureName method %}?({% call methodClosureCallParameters method %})
    }
{% else %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} func {{ method.name }}{% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% call downcastGuardBlock method %}
        {% call swiftifyMethodName method.selectorName %}CallsCount += 1
        {% call methodReceivedParameters method %}
        {% if method.throws %}
        {% call methodThrowableErrorUsage method %}
        {% endif %}
        {% if method.returnTypeName.isVoid %}
        {% if method.throws %}try {% endif %}{% call methodClosureName method %}?({% call methodClosureCallParameters method %})
        {% else %}
        return {% if method.throws %}try {% endif %}{% call methodClosureName method %}.map({ {% if method.throws %}try {% endif %}$0({% call methodClosureCallParameters method %}) }) ?? {% call swiftifyMethodName method.selectorName %}ReturnValue
        {% endif %}
    }

{% endif %}
{% endmacro %}

{% macro mockOptionalVariable variable type %}
    {% call adjustedAccessLevel type %} var {% call mockedVariableName variable %}: {{ variable.typeName }}
{% endmacro %}

{% macro mockNonOptionalArrayOrDictionaryVariable variable type %}
    {% call adjustedAccessLevel type %} var {% call mockedVariableName variable %}: {{ variable.typeName }} = {% if variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro %}

{% macro mockNonOptionalVariable variable type %}
    {% call adjustedAccessLevel type %} var {% call mockedVariableName variable %}: {{ variable.typeName }} {
        get { return {% call underlyingMockedVariableName variable %} }
        set(value) { {% call underlyingMockedVariableName variable %} = value }
    }
    {% call adjustedAccessLevel type %} var {% call underlyingMockedVariableName variable %}: {{ variable.typeName }}!
{% endmacro %}

{% macro underlyingMockedVariableName variable %}underlying{{ variable.name|upperFirstLetter }}{% endmacro %}
{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}

{{argument.imports}}

{% for type in types.protocols where type.based.AutoMockable or type|annotated:"AutoMockable" or type.based.ResettableAutoMockable or type|annotated:"ResettableAutoMockable" %}{% if type.name != "AutoMockable" and type.name != "ResettableAutoMockable" %}
{% call adjustedAccessLevel type %} class {{ type.name }}Mock{% call genericTypesDeclaration type %}: {{ type.name }}{% call genericConstraintsDeclaration type %} {
{% for variable in type.allVariables|!definedInExtension %}
    {% if variable.isOptional %}{% call mockOptionalVariable variable type %}{% elif variable.isArray or variable.isDictionary %}{% call mockNonOptionalArrayOrDictionaryVariable variable type %}{% else %}{% call mockNonOptionalVariable variable type %}{% endif %}
{% endfor %}

{% if type.accessLevel == "public" %}
    public init() {}

{% endif %}
{% for method in type.allMethods|!definedInExtension %}
    {% call mockMethod method type %}
    {% if type.based.ResettableAutoMockable or type|annotated:"ResettableAutoMockable" %}
    {% call adjustedAccessLevel type %}{% if method.isStatic %} static{% endif %} func {% call swiftifyMethodName method.selectorName %}Reset() {
        {% if method.throws %}
        {% call swiftifyMethodName method.selectorName %}ThrowableError = nil
        {% endif %}
        {% call methodClosureName method %} = nil
        {% call swiftifyMethodName method.selectorName %}CallsCount = 0
        {% call methodReceivedParamName method %} = nil
        {% if not method.returnTypeName.isVoid and not method.isInitializer %}
        {% call swiftifyMethodName method.selectorName %}ReturnValue = nil
        {% endif %}
    }
    {% endif %}
{% endfor %}
}
{% endif %}{% endfor %}
